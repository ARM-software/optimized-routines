#!/bin/bash

# ULP error check script.
#
# Copyright (c) 2019-2024, Arm Limited.
# SPDX-License-Identifier: MIT OR Apache-2.0 WITH LLVM-exception

#set -x
set -eu

# cd to bin directory.
cd "${0%/*}"

flags="${ULPFLAGS:--q}"
emu="$@"

# Enable SVE testing
WANT_SVE_MATH=${WANT_SVE_MATH:-0}

FAIL=0
PASS=0

t() {
    # First argument: routine name
    routine=$1; shift
    # Second and third argument: lo and hi bounds
    # Extra processing needed for bivariate routines
    IFS=',' read -ra LO <<< "$1"; shift
    IFS=',' read -ra HI <<< "$1"; shift
    ITV="${LO[0]} ${HI[0]}"
    for i in "${!LO[@]}"; do
	[[ "$i" -eq "0" ]] || ITV="$ITV x ${LO[$i]} ${HI[$i]}"
    done
    # Fourth argument: number of test points
    n=$1; shift
    # Any remaining arguments forwards directly to ulp tool
    extra_flags="$@"

    # Read ULP limits, fenv expectation and control values from autogenerated files
    # (no check for non-nearest limits file)
    L=$(grep "^$routine " $LIMITS | awk '{print $2}')
    [ -n "$L" ] || { echo ERROR: Could not determine ULP limit for $routine in $LIMITS && false; }
    if grep -q "^$routine$" $FENV; then extra_flags="$extra_flags -f"; fi
    cvals=($(grep "^$routine " $CVALS | awk '{print $2}'))

    # Add -z flag to ignore zero sign for vector routines - note the version of this script in the main
    # math directory passes this for every routine in ARCH directory
    grep -q "ZGV" <<< "$routine" && extra_flags="$extra_flags -z"

    # Run ULP tool - math/ version of this script passes rounding mode, but PL routines only support
    # round-to-nearest
    # Emulate a do-while loop to loop over cvals, but still execute once if it is empty
    while : ; do
	# Empty string if we are at the end of cvals array
	c_arg=""
	[ -z "${cvals[0]:-}" ] || c_arg="-c ${cvals[0]}"
	$emu ./ulp -e $L $flags $extra_flags $c_arg $routine $ITV $n && PASS=$((PASS+1)) || FAIL=$((FAIL+1))
	# Shift cvals by 1, and break if it is now empty
	cvals=("${cvals[@]:1}")
	[ -n "${cvals[0]:-}" ] || break
    done
}

check() {
	$emu ./ulp -f -q "$@" #>/dev/null
}

# vector functions
flags="${ULPFLAGS:--q}"
runsv=


while read F LO HI N
do
	[[ -z $F ]] || t $F $LO $HI $N
done << EOF
$(grep "\b$FUNC\b" $INTERVALS)
EOF

[ 0 -eq $FAIL ] || {
	echo "FAILED $FAIL PASSED $PASS"
	exit 1
}
