// polynomial for approximating exp(x)-1 in double precision
//
// Copyright (c) 2022-2025, Arm Limited.
// SPDX-License-Identifier: MIT OR Apache-2.0 WITH LLVM-exception

deg = 6; // poly degree
N = 64; // table entries
b = log(2)/(2*N);  // interval
a = -b;

f = proc(y) {
  return exp(y);
};

// return p that minimizes |exp(x) - poly(x) - x^d*p(x)|
approx = proc(poly,d) {
  return remez(exp(x)-poly(x), deg-d, [a;b], x^d, 1e-10);
};

// first 2 coeffs are fixed, iteratively find optimal double prec coeffs
poly = 1 + x;
for i from 2 to deg do {
  p = roundcoefficients(approx(poly,i), [|D ...|]);
  poly = poly + x^i*coeff(p,0);
};

display = hexadecimal;
print("rel error:", accurateinfnorm(1-poly(x)/exp(x), [a;b], 30));
print("rel error:", dirtyinfnorm(1-poly(x)/f(x), [a;b], 30));
print("in [",a,b,"]");
print("coeffs:");
for i from 2 to deg do round(coeff(poly,i), D, RN);

// SVE expm1 relies on a small lookup table for fexpa correction.
display = decimal;
for i from 0 to 16 do {
  val = 2^(i/64) - 1;
  err = round(val, D, RN);
  print(err);
};

for i from 0 to 16 do {
  val = 2^(-i/64) - 1;
  err = round(val, D, RN);
  print(err);
};