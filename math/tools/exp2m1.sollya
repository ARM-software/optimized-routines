// polynomial for approximating single precision 2^x - 1
//
// Copyright (c) 2025, Arm Limited.
// SPDX-License-Identifier: MIT OR Apache-2.0 WITH LLVM-exception

// Parameters
deg = 7; // poly degree
N = 128;
b = 1/(2*N); // interval
a = -b;
f = 2^x;

// return p that minimizes |f(x) - poly(x) - x^d*p(x)|/|f(x)|
approx = proc(poly,d) {
  return remez(1 - poly(x)/f(x), deg-d, [a;b], x^d/f(x), 1e-10);
};
// return p that minimizes |f(x) - poly(x) - x^d*p(x)|
approx_abs = proc(poly,d) {
  return remez(f(x) - poly(x), deg-d, [a;b], x^d, 1e-10);
};

// first coeff is fixed, iteratively find optimal coeffs
poly = 1;
for i from 1 to deg do {
  p = roundcoefficients(approx(poly,i), [|D ...|]);
//  p = roundcoefficients(approx_abs(poly,i), [|D ...|]);
  poly = poly + x^i*coeff(p,0);
};

display = hexadecimal;
print("rel error:", accurateinfnorm(1-poly(x)/2^x, [a;b], 30));
print("abs error:", accurateinfnorm(2^x-poly(x), [a;b], 30));
print("in [",a,b,"]");
// double interval error for non-nearest rounding:
print("rel2 error:", accurateinfnorm(1-poly(x)/2^x, [2*a;2*b], 30));
print("abs2 error:", accurateinfnorm(2^x-poly(x), [2*a;2*b], 30));
print("in [",2*a,2*b,"]");
print("coeffs:");
for i from 0 to deg do coeff(poly,i);

// exp2m1 relies on a lookup table for scale correction.
display = decimal;
for i from 0 to 43 do {
  val = 2^(i/64) - 1;
  err = round(val, D, RN);
  print(err, ",");
};

display = decimal;
for i from 1 to 44 do {
  val = 2^(-i/64) - 1;
  err = round(val, D, RN);
  print(err, ",");
};
