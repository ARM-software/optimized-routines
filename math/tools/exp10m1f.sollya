// polynomial for approximating single precision 10^x
//
// Copyright (c) 2025, Arm Limited.
// SPDX-License-Identifier: MIT OR Apache-2.0 WITH LLVM-exception


// Parameters
deg = 9; // Neon 9, SVE 2
N = 1;  // Neon 1, SVE 64
b = log(2)/(2 * N * log(10)); // interval
a = -b;
f = 10^x;

// return p that minimizes relative error.
approx = proc(poly,d) {
  return remez(1 - poly(x)/f(x), deg-d, [a;b], x^d/f(x), 1e-10);
};

// first coeff is fixed, iteratively find optimal coeffs
poly = 1;
for i from 1 to deg do {
  p = roundcoefficients(approx(poly,i), [|SG ...|]);
  poly = poly + x^i*coeff(p, 0);
};

display = hexadecimal!;
print("rel error:", accurateinfnorm(1-poly(x)/10^x, [a;b], 30));
print("in [",a,b,"]");
print("Poly coeffs:");
for i from 1 to deg do coeff(poly,i);

log10_2 = round(log(10) / log(2), SG, RN);
log2_10 = log(2) / (log(10));
log2_10_hi = round(log2_10, SG, RN);
log2_10_lo = round(log2_10 - log2_10_hi, SG, RN);

print("log10_2:");
print(log10_2);

print("log2_10_hi/lo:");
print(log2_10_hi);
print(log2_10_lo);
